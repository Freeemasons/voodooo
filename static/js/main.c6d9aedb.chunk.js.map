{"version":3,"sources":["components/SearchForm.js","components/PostsSynchron.js","App.js","redux/actions.js","redux/types.js","serviceWorker.js","redux/postsReducer.js","redux/authorReducer.js","redux/rootReducer.js","redux/sagas.js","index.js"],"names":["SearchForm","fluid","className","lg","type","placeholder","onChange","this","props","handleSearch","React","Component","PostsSynchron","postShow","posts","map","el","postAuthor","authors","find","author","id","userId","key","title","body","length","name","App","state","bind","event","searchQuery","target","value","toLowerCase","matchingAuthors","filter","includes","matchedPosts","post","setState","showPost","showAuthors","prevProps","prevState","snapshot","connect","dispatch","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","payload","sagasWatcher","sagaWorker","sagaWorkerAuthor","takeEvery","call","getPosts","put","getAuthors","a","fetch","response","json","saga","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","app","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAGqBA,E,uKAIjB,OACE,6BACE,kBAAC,OAAD,CAAMC,OAAK,EAACC,UAAU,eACpB,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKC,GAAI,GAAID,UAAU,oBACrB,2BAAOE,KAAK,OAAOC,YAAY,YAAaC,SAAUC,KAAKC,MAAMC,aAAcP,UAAU,+B,GAT/DQ,IAAMC,WCwD/BC,E,uKApDJ,IAAD,OAIEC,EAAWN,KAAKC,MAAMM,MAAMC,KAAI,SAAAC,GAEpC,IAAMC,EAAc,EAAKT,MAAMU,QAAQC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,KAAOL,EAAGM,UAEvE,OACE,kBAAC,MAAD,CAAKnB,GAAI,EAAGoB,IAAKP,EAAGK,IAClB,6BACE,wBAAInB,UAAU,iBACZ,wBAAKA,UAAU,uBACZc,EAAGQ,OAEN,4BACGR,EAAGS,MAEN,wBAAIvB,UAAU,wBACZ,+BACK,EAAKM,MAAMU,QAAQQ,QAAUT,EAAWU,aAa3D,OACE,6BACE,kBAAC,OAAD,CAAM1B,OAAK,EAACC,UAAU,WACpB,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKC,GAAI,IACP,yBAAKD,UAAU,sBACb,kBAAC,MAAD,CAAKA,UAAU,kBACRK,KAAKC,MAAMM,MAAMY,QAAUb,Y,GA3CtBF,a,YCMtBiB,E,kDAEJ,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IACDqB,MAAQ,CACXf,MAAO,GACPI,QAAS,IAGX,EAAKT,aAAe,EAAKA,aAAaqB,KAAlB,gBAPH,E,yDAYNC,GACX,IAAIC,EAAcD,EAAME,OAAOC,MAAMC,cAE/BC,EAAkB7B,KAAKC,MAAMU,QAAQmB,QAAO,SAAAjB,GAAM,OAAIA,EAAOO,KAAKQ,cAAcG,SAASN,MAAcjB,KAAI,SAAAK,GAAM,OAAIA,EAAOC,MAE5HkB,EAAehC,KAAKC,MAAMM,MAAMuB,QAAO,SAAAG,GAE3C,QAAIJ,EAAgBE,SAASE,EAAKlB,WAKpCf,KAAKkC,SAAS,CACZ3B,MAAOyB,M,0CAKU,IAAD,EACgBhC,KAAKC,MAA/BkC,EADU,EACVA,SAAUC,EADA,EACAA,YAClBD,IACAC,M,yCAGiBC,EAAWC,EAAWC,GACnCF,EAAU1B,QAAQQ,SAAWnB,KAAKC,MAAMU,QAAQQ,QAClDnB,KAAKkC,SAAS,CAAEvB,QAASX,KAAKC,MAAMU,UAElC0B,EAAU9B,MAAMY,SAAWnB,KAAKC,MAAMM,MAAMY,QAC9CnB,KAAKkC,SAAS,CAAE3B,MAAOP,KAAKC,MAAMM,U,+BAKpC,OACE,yBAAKZ,UAAU,aACb,kBAAC,OAAD,KACE,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKC,GAAI,IACP,kBAAC,EAAD,CAAYM,aAAcF,KAAKE,iBAGnC,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKN,GAAI,IACP,kBAAC,EAAD,CAAeW,MAAOP,KAAKsB,MAAMf,MAAQI,QAASX,KAAKsB,MAAMX,kB,GA1DzDP,aAiFHoC,eAdS,SAAAlB,GACtB,MAAO,CACLf,MAAOe,EAAMf,MACbI,QAASW,EAAMX,YAIQ,SAAA8B,GACzB,MAAO,CACLN,SAAU,kBAAOM,ECnFZ,CACL5C,KCJsB,qBFuFtBuC,YAAa,kBAAOK,EC9Ef,CACL5C,KCNwB,4BFuFb2C,CAA6CnB,GG/ExCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBChBAC,EAAe,GCAfA,EAAe,GCERC,EAAcC,0BAAgB,CACzC1C,MFD0B,WAAmC,IAAlCe,EAAiC,uDAAzByB,EAAcG,EAAW,uCAC5D,OAAQA,EAAOrD,MACb,IFJ8B,0BEK5B,MAAM,GAAN,mBAAYyB,GAAZ,YAAsB4B,EAAOC,UAC/B,QAAS,OAAO7B,IEFlBX,QDF2B,WAAmC,IAAlCW,EAAiC,uDAAzByB,EAAcG,EAAW,uCAC7D,OAAQA,EAAOrD,MACb,IHAgC,8BGC9B,MAAM,GAAN,mBAAYyB,GAAZ,YAAsB4B,EAAOC,UAC/B,QAAS,OAAO7B,M,kDEJH8B,G,WAKPC,G,WAOAC,GAZH,SAAUF,IAAV,iEACL,OADK,SACCG,YLLkB,kBKKIF,GADvB,OAEL,OAFK,SAECE,YLFoB,sBKEID,GAFzB,uCAKP,SAAUD,IAAV,uEAEkB,OAFlB,SAEwBG,YAAKC,GAF7B,OAGE,OADMN,EAFR,gBAGQO,YAAI,CAAC7D,KLVqB,0BKUKsD,YAHvC,uCAOA,SAAUG,IAAV,uEAEkB,OAFlB,SAEwBE,YAAKG,GAF7B,OAGE,OADMR,EAFR,gBAGQO,YAAI,CAAC7D,KLbuB,8BKaKsD,YAHzC,uC,SAOeM,I,2EAAf,4BAAAG,EAAA,sEACyBC,MAAM,8CAD/B,cACQC,EADR,gBAEeA,EAASC,OAFxB,oF,+BAKeJ,I,2EAAf,4BAAAC,EAAA,sEACyBC,MAAM,8CAD/B,cACQC,EADR,gBAEeA,EAASC,OAFxB,oF,kCCbMC,EAAOC,cAEPC,EAAQC,sBAAYnB,EAAaoB,8BACrCC,0BACEL,KAIJA,EAAKM,IAAIlB,GAGT,IAAMmB,EACJ,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAKJM,iBAAOD,EAAKE,SAASC,eAAe,SLkG9B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c6d9aedb.chunk.js","sourcesContent":["import React from \"react\";\nimport {Col, Grid, Row} from \"react-flexbox-grid\";\n\nexport default class SearchForm extends React.Component {\n\n\n  render() {\n    return (\n      <div>\n        <Grid fluid className=\"search-form\">\n          <Row>\n            <Col lg={12} className=\"search-form__row\">\n              <input type=\"text\" placeholder=\"Search...\"  onChange={this.props.handleSearch} className=\"search-form__input\"/>\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    )\n  }\n}\n","import React, {Component} from \"react\";\nimport { Row, Col, Grid } from \"react-flexbox-grid\";\n\n\nclass PostsSynchron extends Component {\n\n\n  render(){\n\n\n\n      const postShow = this.props.posts.map(el => {\n\n        const postAuthor =  this.props.authors.find(author => author.id === el.userId);\n\n        return (\n          <Col lg={4} key={el.id} >\n            <div>\n              <ul className=\"article__item\">\n                <li  className=\"article__item-title\">\n                  {el.title}\n                </li>\n                <li  >\n                  {el.body}\n                </li>\n                <li className=\"article__item-author\" >\n                  <div>\n                    {!!this.props.authors.length && postAuthor.name}\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </Col>\n        );\n      })\n\n\n\n\n\n    return (\n      <div>\n        <Grid fluid className=\"article\">\n          <Row>\n            <Col lg={12}>\n              <div className=\"article__container\">\n                <Row className=\"article__row\">\n                    {!!this.props.posts.length && postShow}\n                </Row>\n              </div>\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    )\n  }\n}\n\n\nexport default PostsSynchron;\n","import React, {Component} from 'react';\n\nimport './App.css';\nimport SearchForm from \"./components/SearchForm\";\nimport { Row, Col, Grid } from \"react-flexbox-grid\";\nimport PostsSynchron from \"./components/PostsSynchron\";\nimport {connect} from \"react-redux\";\nimport {showAuthors, showPost} from \"./redux/actions\";\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      authors: [],\n    }\n\n    this.handleSearch = this.handleSearch.bind(this)\n  }\n\n\n\n  handleSearch(event) {\n    let searchQuery = event.target.value.toLowerCase();\n\n    const matchingAuthors = this.props.authors.filter(author => author.name.toLowerCase().includes(searchQuery)).map(author => author.id);\n\n    const matchedPosts = this.props.posts.filter(post => {\n\n      if (matchingAuthors.includes(post.userId)) return true;\n      return false;\n    })\n\n\n    this.setState({\n      posts: matchedPosts\n    });\n  }\n\n\n  componentDidMount() {\n    const { showPost, showAuthors } = this.props;\n    showPost();\n    showAuthors();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.authors.length !== this.props.authors.length) {\n      this.setState({ authors: this.props.authors });\n    }\n    if (prevProps.posts.length !== this.props.posts.length) {\n      this.setState({ posts: this.props.posts });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Grid>\n          <Row>\n            <Col lg={12}>\n              <SearchForm handleSearch={this.handleSearch}/>\n            </Col>\n          </Row>\n          <Row>\n            <Col lg={12}>\n              <PostsSynchron posts={this.state.posts}  authors={this.state.authors}/>\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.posts,\n    authors: state.authors,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    showPost: () => (dispatch(showPost())),\n    showAuthors: () => (dispatch(showAuthors())),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {SHOW_POSTS, SHOW_AUTHORS} from './types'\n\nexport function showPost(post) {\n  return {\n    type: SHOW_POSTS\n  }\n}\n\nexport function showAuthors(author) {\n  return {\n    type: SHOW_AUTHORS\n  }\n}\n","export const SHOW_POSTS = 'POST/SHOW_POSTS'\n\nexport const SHOW_POSTS_SUCCESS = 'POST/SHOW_POSTS_SUCCESS';\n\nexport const SHOW_AUTHORS = 'AUTHOR/SHOW_AUTHORS';\n\nexport const SHOW_AUTHORS_SUCCESS = 'AUTHOR/SHOW_AUTHORS_SUCCESS';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {SHOW_POSTS_SUCCESS} from \"./types\";\n\nconst initialState = [];\n\nexport const postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SHOW_POSTS_SUCCESS:\n      return [ ...state, ...action.payload];\n    default: return state;\n  }\n}\n","import {SHOW_AUTHORS_SUCCESS} from \"./types\";\n\nconst initialState = [];\n\nexport const authorReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SHOW_AUTHORS_SUCCESS:\n      return [ ...state, ...action.payload];\n    default: return state;\n  }\n}\n","import {combineReducers} from \"redux\";\nimport {postsReducer} from \"./postsReducer\";\nimport {authorReducer} from './authorReducer'\n\nexport const rootReducer = combineReducers({\n  posts: postsReducer,\n  authors: authorReducer\n})\n\n","import {SHOW_POSTS, SHOW_POSTS_SUCCESS, SHOW_AUTHORS, SHOW_AUTHORS_SUCCESS} from \"./types\";\nimport {takeEvery, put, call} from \"@redux-saga/core/effects\";\n\n\nexport function* sagasWatcher () {\n  yield takeEvery(SHOW_POSTS, sagaWorker)\n  yield takeEvery(SHOW_AUTHORS, sagaWorkerAuthor)\n}\n\nfunction* sagaWorker() {\n\n  const payload = yield call(getPosts);\n  yield put({type: SHOW_POSTS_SUCCESS, payload  })\n\n}\n\nfunction* sagaWorkerAuthor() {\n\n  const payload = yield call(getAuthors);\n  yield put({type: SHOW_AUTHORS_SUCCESS, payload  })\n\n}\n\nasync function getPosts() {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n  return await response.json();\n}\n\nasync function getAuthors() {\n  const response = await fetch('https://jsonplaceholder.typicode.com/users');\n  return await response.json();\n}\n","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware} from \"redux\";\nimport {Provider} from 'react-redux'\nimport {rootReducer} from \"./redux/rootReducer\";\n\nimport createSagaMiddleware from 'redux-saga'\nimport {sagasWatcher} from \"./redux/sagas\";\nimport {composeWithDevTools} from 'redux-devtools-extension/developmentOnly';\n\n\n\nconst saga = createSagaMiddleware()\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(\n    saga\n  )\n))\n\nsaga.run(sagasWatcher)\n\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\n\nrender(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}